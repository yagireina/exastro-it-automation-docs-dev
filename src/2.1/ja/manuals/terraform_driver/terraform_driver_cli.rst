====================
Terraform-CLI-driver
====================

はじめに
========

本書では、ITAの機能および操作方法について説明します。

Terraform-CLI-driver概要
========================

| 本章ではTerraformおよびTerraform-driverについて説明します。

Terraformについて
-----------------

| TerraformとはHashiCorp社が提供するインフラストラクチャを効率化するオーケストレーションツールです。
|  HCL(HashiCorp ConfigurationLanguage)という言語でコード化したインフラストラクチャ構成について、実行計画を生成したうえで構築を実行します。
| Terraform-CLI-driverでは、HashiCorp社が提供するTerraform CLIパッケージをITAと同一サーバにインストールし、利用します。
| Terraformの詳細情報については、Terraformの製品マニュアルを参照してください。


Terrform-CLI-driverについて
---------------------------

| Terraform-CLI-deriverはITAシステムのオプションとして機能し、ITAと同一のサーバにインストールしたTerraformに対し、作業の実行（Plan/ Apply）および作業ログの取得を行うことができます。
| 作業の実行（Plan /Apply）に利用するModuleファイルをITAシステム上で部品化し、再利用できるよう管理することができます。

      
.. image:: /images/ja/diagram/overview.png
   :width: 6.68819in
   :height: 3.35972in
   :alt: Exastro概要  

**図** **1.2-1 ITAシステム概要**

| また、Terraform-CLI-driverは、Module中の変数を画面から設定することができます。
| 詳細は本書「2 Terraform-CLI-driverでの変数取り扱い」をご参照ください。

Terraform-CLI-driverでの変数取り扱い
====================================

変数の種類
----------

| Terraform-CLI-driverでは、Module中の変数の具体値をITAの設定画面から設定することができます。

| ※設定方法の詳細は、本書 「5.2.8代入値管理 」を参照してください。
|  Module中の変数で、ITAの変数として扱える変数は以下の1種類があります。

+----------+----------------------------------------------------------+
| 種類     | 内容                                                     |
+==========+==========================================================+
| 通常変数 | 変数名に対して具体値を定義できる変数です。               |
|          |                                                          |
|          | Module内の変数は HCL（HashiCorp Configuration            |
|          | Language）の変数ルールに従い                             |
|          | 以下の形式で記述してくださ                               |
|          | い。この場合「xxx」がModuleから変数として抜出されます。  |
|          |                                                          |
|          | また、typeとdefault値を設定することができます。          |
|          |                                                          |
|          | この場合、                                               |
|          | 「○○」がtypeとして、「△△」がdefaultとして抜出されます。  |
|          |                                                          |
|          | typeとdefaultの設定は必須ではありません。                |
|          |                                                          |
|          | +------------------+                                     |
|          | | variable “xxx” { |                                     |
|          | |                  |                                     |
|          | | type = ○○        |                                     |
|          | |                  |                                     |
|          | | default = △△     |                                     |
|          | |                  |                                     |
|          | | ～省略~          |                                     |
|          | |                  |                                     |
|          | | }                |                                     |
|          | +------------------+                                     |
+----------+----------------------------------------------------------+

変数の抜出および具体値登録
--------------------------

| ITAにアップロードされたModule素材から変数を抜出して具体値を登録できます。
| 抜出した変数の具体値は「 5.2.7 代入値自動登録設定」「5.2.8 代入値管理」で具体値を登録します。
| 登録された変数と具体値は、作業実行時に生成されるterraform.tfvarsファイルに「変数名」が「Key」、「具体値」が「Value」として記載され、作業実行で使用されます。

変数のタイプについて
--------------------

| 変数内でtypeを設定することができます。
| Module内の変数は HCL（HashiCorp ConfigurationLanguage）の変数ルールに従い記述してください。

| ITA内で扱う変数は以下の通りです。
| 記入例は「 8.1 Module素材記入例」をご参照ください。

+----------+----------+----------+----------+----------+----------+
| type     | 詳細     | 代\      | メンバ\  | typeの\  | d\       |
|          |          | 入順序   | ー変数   | 記述例   | efaultの\|
|          |          |          |          |          | 記述例   |
|          |          | 対象※1   | 対象※2   | 記述例   |          |
+==========+==========+==========+==========+==========+==========+
| string   | 文\      | ×        | ×        | string   | あいう   |
|          | 字列型。 |          |          |          |          |
+----------+----------+----------+----------+----------+----------+
| number   | 数値型。 | ×        | ×        | number   | 2022     |
+----------+----------+----------+----------+----------+----------+
| bool     | trueまた\| ×        | ×        | bool     | true     |
|          | はfalse  |          |          |          |          |
+----------+----------+----------+----------+----------+----------+
| list     | 配列型。 | 〇       | ×        | list     | [“あ”,   |
|          |          |          |          | (string) | “い”,    |
|          |          |          |          |          | “う”]    |
+----------+----------+----------+----------+----------+----------+
| set      | 配列型。 | 〇       | ×        | set      | [1, 2,   |
|          | ユニーク\|          |          | (number) | 3]       |
|          | な値の設\|          |          |          |          |
|          | 定が求め\|          |          |          |          |
|          | られる。 |          |          |          |          |
|          |          |          |          |          |          |
|          | I\       |          |          |          |          |
|          | TA上では\|          |          |          |          |
|          | 具体値が\|          |          |          |          |
|          | ユニーク\|          |          |          |          |
|          | か否かは\|          |          |          |          |
|          | 判定され\|          |          |          |          |
|          | ません。 |          |          |          |          |
+----------+----------+----------+----------+----------+----------+
| tuple    | 配\      | ×        | 〇       | tuple(   | [“       |
|          | 列型。予\|          |          | [string, | あいう”, |
|          | めn番目\ |          |          | number]) | 2022]    |
|          | にどのty\|          |          |          |          |
|          | peを設定\|          |          |          |          |
|          | するか決\|          |          |          |          |
|          | めておく\|          |          |          |          |
|          | 必要があ\|          |          |          |          |
|          | ります。 |          |          |          |          |
|          |          |          |          |          |          |
|          | 値\      |          |          |          |          |
|          | の入力数\|          |          |          |          |
|          | が決めら\|          |          |          |          |
|          | れている\|          |          |          |          |
|          | のでITA\ |          |          |          |          |
|          | 上ではメ\|          |          |          |          |
|          | ンバー変\|          |          |          |          |
|          | 数として\|          |          |          |          |
|          | プルダウ\|          |          |          |          |
|          | ンで選択\|          |          |          |          |
|          | します。 |          |          |          |          |
+----------+----------+----------+----------+----------+----------+
| map      | key-va\  | ×        | ×        | map      | { “key”  |
|          | lue型。I |          |          | (string) | =        |
|          | TA上では\|          |          |          | “value”  |
|          | map型が\ |          |          |          | }        |
|          | 一つ以上\|          |          |          |          |
|          | 含まれて\|          |          |          |          |
|          | いるtype\|          |          |          |          |
|          | を設定し\|          |          |          |          |
|          | た場合、\|          |          |          |          |
|          | type情報\|          |          |          |          |
|          | からKEY\ |          |          |          |          |
|          | 値を特定\|          |          |          |          |
|          | できない\|          |          |          |          |
|          | ので、代\|          |          |          |          |
|          | 入値を設\|          |          |          |          |
|          | 定する場\|          |          |          |          |
|          | 合はHCL\ |          |          |          |          |
|          | 設定をON\|          |          |          |          |
|          | にしてく\|          |          |          |          |
|          | ださい。 |          |          |          |          |
|          |          |          |          |          |          |
|          | HCL設定\ |          |          |          |          |
|          | について\|          |          |          |          |
|          | の説明は\|          |          |          |          |
|          | 「6.2\   |          |          |          |          |
|          | .12  代\ |          |          |          |          |
|          | 入値自動\|          |          |          |          |
|          | 登録」ま\|          |          |          |          |
|          | たは「\  |          |          |          |          |
|          | 6.2.13\  |          |          |          |          |
|          | 代入値\  |          |          |          |          |
|          | 管理」を\|          |          |          |          |
|          | ご参照く\|          |          |          |          |
|          | ださい。 |          |          |          |          |
+----------+----------+----------+----------+----------+----------+
| object   | key-v\   | ×        | 〇       | object({ | {        |
|          | alue型。 |          |          |          |          |
|          |          |          |          | key =    | “key” =  |
|          | ITA上で\ |          |          | number   | 2022     |
|          | はkeyを\ |          |          |          |          |
|          | メンバー |          |          | })       | }        |
|          | 変数とし\|          |          |          |          |
|          | て扱いま\|          |          |          |          |
|          | す。key\ |          |          |          |          |
|          | 名に日本\|          |          |          |          |
|          | 語は含ま\|          |          |          |          |
|          | ないでく\|          |          |          |          |
|          | ださい。 |          |          |          |          |
+----------+----------+----------+----------+----------+----------+
| any      | すべ\    | ×        | ×        | any      | あいう   |
|          | てに適合\|          |          |          |          |
|          | する型。 |          |          |          |          |
|          |          |          |          |          |          |
|          | ITA上で\ |          |          |          |          |
|          | はstring\|          |          |          |          |
|          | 型と同じ\|          |          |          |          |
|          | 扱いとな\|          |          |          |          |
|          | ります。 |          |          |          |          |
+----------+----------+----------+----------+----------+----------+
| 記載なし | ty\      | ×        | ×        |          | あいう   |
|          | peを記載\|          |          |          |          |
|          | しなかっ\|          |          |          |          |
|          | た場合、 |          |          |          |          |
|          | ITA上では|          |          |          |          |
|          | string型 |          |          |          |          |
|          | と同じ扱\|          |          |          |          |
|          | いになり |          |          |          |          |
|          | ます。   |          |          |          |          |
+----------+----------+----------+----------+----------+----------+ 


|  ※1 …代入順序

| 変数に複数具体値を設定する際の先頭から代入する順序です。
| 変数または階層構造の変数の最下層の変数のタイプがlist,setの場合、代入値自動登録設定メニュー/代入値管理メニューにて設定可能です。
   
例: 変数タイプがlistの場合
**************************

- tfファイルと登録値

  .. code-block:: bash 
  
     variable "VAR_hoge" {
        type = list(string)
     }

  
#. | 代入値例(代入値自動登録設定)

   .. list-table:: 代入値例
      :widths: 5 10 10 5 10
      :header-rows: 1
      :align: left
   
      * - 項番
        - 変数名
        - メンバー変数
        - 代入順序
        - 具体値
      * -  1
        -  VAR_hoge
        -  入力不要
        -  1
        -  あいう
      * - 2
        - VAR_hoge
        - 入力不要
        - 2
        - かきく   
    
 
#. | Terraformに送信される値

   .. code-block:: bash 
   
      ["あいう","かきく"] 
   
例： 階層構造の変数の最下層の変数タイプがsetの場合
**************************************************

- tfファイルと登録値

  .. code-block:: bash 
  
     variable "VAR_hoge" {
        type = object({
           key = set(number)
        })
     }
    


#. | 代入値例(代入値自動登録設定/代入値管理) 

   .. list-table:: 代入値例
      :widths: 5 10 10 5 10
      :header-rows: 1
      :align: left
   
      * - 項番
        - 変数名
        - メンバー変数
        - 代入順序
        - 具体値
      * -  1
        -  VAR_hoge
        -  key
        -  1
        -  1
      * - 2
        - VAR_hoge
        - key
        - 2
        - 2   

#. | Terraformに送信される値

   .. code-block:: bash 
   
      {
          key = [1,2]
      }    
   

| ※2 …メンバー変数

| 変数がkey-value型である場合のkey名です。
| 変数のタイプがobjectの場合、<KEY>= <TYPE>の<KEY>をメンバー変数とします。
| 変数のタイプがtupleの場合、tuple内に定義した変数を先頭から[0],[1],[2]…と採番してメンバー変数となります。

| 変数のタイプが変数ネスト管理メニューの登録対象の場合、最大繰返数をもとに[0],[1],[2]…と採番してメンバー変数となります。
| 変数ネストに関しては「2.6 変数ネスト管理」をご参照ください。

例: 変数タイプがobjectの場合
****************************

- tfファイルと登録値
  
.. code-block:: bash 

   variable "VAR_hoge" {
       type = object({
         NAME = string,
         IP = string
       })
       default = {
         “NAME” = “machine_01”,
         “IP” = “127.0.0.1”
      }
   }

#. | 代入値例(代入値自動登録設定/代入値管理)

   .. list-table:: 代入値例
      :widths: 5 10 10 5 10
      :header-rows: 1
      :align: left
   
      * - 項番
        - 変数名
        - メンバー変数
        - 代入順序
        - 具体値
      * -  1
        -  VAR_hoge
        -  NAME
        -  入力不可
        -  my_machine
      * - 2
        - VAR_hoge
        - IP
        - 入力不可
        - 192.168.01  
#. | Terraformに送信される値

   .. code-block:: bash
   
      {
          NAME = "my_machine"
          IP = "192.168.1"
      } 
   
例: 変数のタイプがtupleの場合
*****************************

- tfファイルと登録値

.. code-block:: bash

   variable "VAR_hoge" {
       type = tuple([string,number])
       default = ["aaa",2022]
   }      

#. | 代入値例(代入値自動登録設定/代入値管理)

   .. list-table:: 代入値例
      :widths: 5 10 10 5 10
      :header-rows: 1
      :align: left
   
      * - 項番
        - 変数名
        - メンバー変数
        - 代入順序
        - 具体値
      * -  1
        -  VAR_hoge
        -  [0]
        -  入力不可
        -  bbb
      * -  2
        -  VAR_hoge
        -  [1]
        -  入力不可
        -  2023

#. | Terraformに送信される値

   .. code-block:: bash
   
      ["bbb", 2023]  

例: 変数のタイプがネスト管理対象の場合
**************************************

- tfファイルと登録値

.. code-block:: bash
   
   variable "VAR_hoge"{
       type = list(set(string))
       default = [
         ["aaa","bbb"]
         ["ccc","ddd"]
       ]
   }       


#. |  代入値例(代入値自動登録設定/代入値管理)

   .. list-table:: 代入値例
      :widths: 5 10 10 5 10
      :header-rows: 1
      :align: left
   
      * - 項番
        - 変数名
        - メンバー変数
        - 代入順序
        - 具体値
      * -  1
        -  VAR_hoge
        -  [0]
        -  1
        -  あああ
      * -  2
        -  VAR_hoge
        -  [0]
        -  2
        -  いいい
      * - 3
        - VAR_hoge
        - [1]
        - 1
        - ううう
      * - 4
        - VAR_hoge
        - [1]
        - 2
        - えええ
            
#. | Terraformに送信される値

   .. code-block:: bash 
   
      [
         [“あああ”, “いいい”],
         [“ううう”, “えええ”]
      ]
         

Terraform-CLI-driver コンソールメニュー構成
===========================================

| 本章では、ITAコンソールのメニュー構成について説明します

メニュー/画面一覧
-----------------

1. ITA\ 基本コンソールのメニュー

| Terraform-CLI-driverで利用するITA基本コンソールのメニュー一覧を以下に記述します。

.. list-table:: 3.1-1 基本コンソール メニュー/画面一覧
   :widths: 3 10 10 20
   :header-rows: 1
   :align: left

   * - No
     - メニューグループ
     - メニュー・画面
     - 説明
   * - 1
     - ITA基本コンソール
     - オペレーション一覧
     - オペレーション一覧をメンテナンス(閲覧/登録/更新/廃止)できます。

2. Terraform-CLI-driverコンソールのメニュー

| Terraform-CLI-driverコンソールのメニュー一覧を以下に記述します。

.. list-table:: 3.1-2 Terraform-CLI-driverコンソール メニュー/画面一覧  
   :widths: 3 10 3 20
   :header-rows: 1
   :align: left

   * - No
     - メニュー・画面
     - 非表示メニュー※1
     - 説明
   * - 1
     - インタフェース情報
     - 
     - 作業実行の情報を管理します。
   * - 2
     - Workspaces管理
     - 
     - Terraformで利用するWorkspaceの情報を管理します。
   * - 3
     - Movement一覧
     - 
     - Symphonyに登録するMovement一覧を管理します。
   * - 4
     - Module素材集
     -
     - Moduleファイルを管理します。
   * - 5
     - Movement-Module紐付
     -
     - MovementとModule素材の関連付けを管理します。
   * - 6
     - 変数ネスト管理
     -
     - Module素材集で登録したtfファイルで定義されている変数のタイプがlist,setかつ、その変数の中でlist,set,tuple,objectが定義されている場合、メンバー変数の最大繰返数を管理します。
   * - 7
     - 代入値自動登録設定
     -
     - パラメータシートのメニューに登録されているオペレーション毎の項目や値を紐付けるMovementと変数を管理します。
   * - 8
     - 代入値管理
     -
     - 変数の代入値を管理します。
   * - 9
     - 作業実行
     - 
     - 作業実行するMovementとオペレーションを選択し実行を指示します。
   * - 10
     - 作業状態確認
     -
     - 作業実行状態を表示します。
   * - 11
     - 作業履歴
     - 
     - 作業実行履歴を管理します。
   * - 12
     - Module変数紐付管理
     - 〇
     - Module変数とModule素材の紐付を管理します。
   * - 13
     - メンバー変数管理
     - 〇
     - メンバー変数を管理します。
   * - 14
     - Movement変数紐付管理
     - 〇
     - Movementと変数の紐付を管理します。
    
.. note:: 

   |  ※1非表示メニューは、バックヤード機能でデータの登録・更新を行うメニューです。
   |  Terraform-CLI-driver機能をインストールした状態では表示されないメニューに設定されています。
   | 非表示メニューを表示するには、「管理コンソール/ロール・メニュー紐付管理」で各メニューの復活処理を行います。
   | 詳細は「利用手順マニュアル_管理コンソール」を参照してください。
   | 尚、データの更新を行うとバックヤード機能が正しく動作しなくなります。データの更新はしないで下さい。
   

Terraform-CLI-driver利用手順
============================

| 各Terraformコンソールの利用手順について説明します

Terraform作業フロー
-------------------

| 各Terraformコンソールにおける標準的な作業フローは以下のとおりです。
| 各作業の詳細は次項に記載しています。
| ITA基本コンソールの利用方法は、「利用手順マニュアル_基本コンソール」を参照してください。
| 以下は、Terraformで作業を実行するまでの流れです。

.. figure:: /images/ja/terraform-driver/common/terraform_flow.png
      :width: 800px
      :align: left
      :alt: 登録画面（オペレーション一覧）


- 作業フロー詳細と参照先

#. | 投入オペレーション名の登録

   | ITA基本コンソールのオペレーション一覧の画面から、作業用の投入オペレーション名を登録します。
   | 詳細は「5.1.1 オペレーション一覧」を参照してください。

#. | インターフェース情報の設定

   | 作業実行の情報を設定します。
   | 詳細は「5.2.1インターフェース情報 」を参照してください。

#. | Workspaceの登録と連携

   | Workspaceの情報を登録します。
   | 詳細は「5.2.2 Workspaces管理 」を参照してください。

#. | 作業パターン(Movement)の登録

   | 作業用のMovementを登録します。
   | 詳細は「5.2.3 Movement一覧」を参照してください。

#. | Module素材の登録

   | 作業で実行するModuleファイルを登録します。
   | 詳細は「5.2.4 Module素材集」を参照してください。

#. | MovementにModule素材を指定

   | 登録したMovementにModule素材を指定します。
   | 詳細は、「5.2.5 Movement-Module紐付 」を参照してください。

#. | 最大繰返数の設定（必要に応じて実施）

   | メンバー変数の最大繰返数を設定します。
   | 詳細は「5.2.6 変数ネスト管理 」を参照してください。

#. | 変数値の設定（必要に応じて実施）

   | Movementに登録したModule素材内で定義した変数の値を設定します。変数を利用していない場合、設定は不要です。
   | 詳細は「5.2.7 代入値自動登録設定」「5.2.8 代入値管理」を参照してください。

#. | 作業実行

   | 実行日時、投入オペレーションを選択して設定して処理の実行を指示します。
   | 詳細は「5.2.9 作業実行」を参照してください。

   
#. | 作業状態確認

   | 実行した作業の状態がリアルタイムで表示されます。
   | また、作業の緊急停止や、実行ログ、エラーログを監視することができます。
   | 詳細は「5.2.10 作業状態確認」を参照してください。

#. | 作業履歴確認
   
   | 実行した作業の一覧が表示され履歴が確認できます。
   | 詳細は「5.2.11 作業管理」を参照してください。


Terraform-CLI-driver機能・操作方法説明
======================================

| 本章では、Terraform-CLI-driverで利用する各コンソールの機能について説明します。

基本コンソール
--------------

| 本節では、ITA基本コンソールでの操作について記載します。
| 本作業はITA基本コンソールマニュアルを参照して、ITA基本コンソール画面内で作業を実施してください。

オペレーション一覧
******************

#. | [オペレーション一覧]画面では、オーケストレータで実行する作業対象ホストに対するオペレーションを管理します。作業はITA基本コンソール内メニューより選択します。

   ..  image:: cli/image5.png
       :alt: オペレーション一覧
       :width: 5.96443in
       :height: 3.08693in

   **図** **5.1.1- 1 サブメニュー画面（オペレーション一覧）**

   | 登録方法の詳細は、関連マニュアルの「利用手順マニュアル_基本コンソール」をご参照下さい。

Terraform-CLI-driverコンソール
------------------------------

| 本節では、Terraform-CLIコンソールでの操作について記載します。

インターフェース情報
********************


#. |  [インターフェース情報]では、ITAシステムと連携するTerraformの作業実行時の情報をメンテナンス（閲覧/更新）することができます。

   .. image:: cli/image6.png
      :alt: インターフェース情報
      :width: 5.73383in
      :height: 2.96667in

   **図** **5.2.1- 1 サブメニュー画面（インターフェース情報）**

#. | 「一覧」-「更新」ボタンより、インターフェース情報の登録を行います。

   | インターフェース情報が未登録または、複数レコード登録されている状態で作業実行した場合、作業実行は想定外エラーとなります 。

   ..  image:: cli/image7.png
       :alt: インターフェース情報
       :width: 4.92174in
       :height: 1.09097in

   図 5.2.1- 2登録画面（インターフェース情報）

#. | インターフェース情報画面の項目一覧は以下のとおりです。

   .. list-table:: 5.2.1-1 項目一覧（インタフェース情報）
         :widths: 10 20 3 10 10
         :header-rows: 1
         :align: left
      
         * - 項目
           - 説明
           - 入力必須
           - 入力形式
           - 制約事項
         * - 並列実行数
           - 同時実行できるMovement(Terraform-CLI)の最大数を入力します。
           - 〇
           - 手動入力
           - 
         * - 状態監視周期(単位ミリ秒) 
           - | 「5.2.10 作業実行確認」で表示されるログのリフレッシュ間隔を入力します。
             | 通常は3000ミリ秒程度が推奨値です。
           - 〇
           - 手動入力
           - 最小値1000ミリ秒
         * - 進行状態表示行数
           - | 「5.2.10 作業状態確認」での進行ログ・エラーログの最大表示行数を入力します。
             | ステータスが[未実行]、[準備中]、[実行中]、[実行中(遅延)]の場合、指定した行数でログを出力します。
             | ステータスが[完了]、[完了(異常)]、[想定外エラー]、[緊急停止]、[未実行(予約)、[予約取消]]の場合、
             | 指定した行数ではなくすべてのログを出力します。
             | 環境毎にチューニングを要しますが、通常は1000行程度が推奨値です。    
           - 〇
           - 手動入力
           - \-
         * - NULL連携
           - | 代入値自動登録設定でパラメータシートの具体値がNULL(空白)の場合に、代入値管理への登録をNULL(空白)の値で行うか設定します。
             | 代入値自動登録設定メニューの「NULL連携」が空白の場合この値が適用されます。
             | 「有効」の場合、パラメータシートの値がどのような値でも代入値管理への登録が行われます。
             | 「無効」の場合、パラメータシートに値が入っている場合のみ代入値管理への登録が行われます。
           - 〇
           - リスト選択
           - 
         * - 備考
           - 自由記述欄です。
           - \-
           - 手動入力
           - 最大長4000バイト 


Workspaces管理
**************


#. |  [Workspaces管理]では、Terraformで利用するWorkspaceについてのメンテナンス（閲覧/登録/更新／/廃止リソース削除）を行います。
   | WorkspaceはTerraformコマンドを実行するためのディレクトリとして利用します。
   | 同一のWorkspaceを対象とした作業実行を行う場合、Terraformが生成するstateファイルはWorkspace単位で管理され、冪等性が保たれます。

   ..  image:: cli/image8.png
       :alt: workspaces管理
       :width: 5.44714in
       :height: 2.82444in

   **図** **5.2.22-1 サブメニュー画面（Workspaces管理）**

#. | 「登録」-「登録開始」ボタンより、Workspace情報の登録を行います。

   ..  image:: cli/image9.png
       :alt: workspaces管理
       :width: 5.01175in
       :height: 2.21561in

   **図** **5.2.22-2 登録画面（Workspaces管理）**

#. | リソース削除ボタンをクリックすると、対象のWorkspaceに対してリソース削除(terraformdestroy)が実行されます。
   |  Movement一覧ボタンをクリックすると、対象のWorkspaceの「5.2.3 Movement一覧 」へ遷移します。

   .. image:: cli/image10.png
      :alt: workspaces管理
      :width: 5.01175in
      :height: 1.1883in

   **図** **5.2.22-3 Workspaces管理**

#. | Workspaces管理画面の項目一覧は以下のとおりです。

   .. list-table:: 5.2.22-1 項目一覧（Workspaces管理)
      :widths: 10 20 3 10 10
      :header-rows: 1
      :align: left

      * - 項目
        - 説明
        - 入力必須
        - 入力形式
        - 制約事項
      * - Workspace Name
        - | Workspaceの名前を入力します。
          | 半角英数字と記号\\_-(アンダーバーとハイフン)のみ利用可能です。
        -  〇
        -  手動入力
        -  最大長90バイト
      * - リソース削除
        - | Workspaceごとに構成・管理されたリソースの削除を実行するボタンです。
          | クリックすると確認ダイアログが表示され[OK]をクイックすると「5.2.10 作業状態確認」に遷移し、\
          | 対象のWorkspaceごとに構成・管理されたリソースの削除が実行されます。
        - \ー
        - \ー
        -
      * - Movement一覧
        - 「5.2.3 Movement一覧」へ遷移するボタンです。
        - \ー
        - \ー
        -  
      * - 備考
        - 自由記述欄です。
        - \ー
        - 手動入力
        - 最大長4000バイト 
        
Movement一覧
************


#. | [Movement一覧]では、Movement名についてのメンテナンス（閲覧/登録/更新/廃止）を行います。
   | MovementはTerraform利用情報としてWorkspaceと紐付ける必要があるため、先に「5.2.2 Workspaces管理 」で対象を登録しておく必要があります。

   ..  image:: cli/image11.png
       :alt: Movement一覧
       :width: 4.8186in
       :height: 2.50022in

   **図** **5.2.33-1サブメニュー画面（Movement一覧）**

#. | 「登録」-「登録開始」ボタンより、Movement情報の登録を行います。

   ..  image:: cli/image12.png
       :alt: Movement一覧
       :width: 5.27252in
       :height: 2.36135in

   **図** **5.2.33-2 登録画面（Movement一覧）**

#. |  Movement-Module紐付ボタンをクリックすると対象のMovementの「5.2.5 Movement-Module紐付 」へ遷移します。

   ..  image:: cli/image13.png
       :alt: Movement一覧
       :width: 4.95649in
       :height: 1.23912in

   **図** **5.2.33-3サブメニュー画面（Movement一覧）**

#. |  Movement一覧画面の項目は以下の通りです。

   .. list-table:: 5.2.33-1 項目一覧（Movement一覧）
      :widths: 10 20 3 10 10
      :header-rows: 1
      :align: left
   
      * - 項目
        - 説明
        - 入力必須
        - 入力形式
        - 制約事項
      * - Movement名
        - Movementの名称を入力します。
        - 〇
        - 手動入力
        - 最大長256バイト
      * - オーケストレータ
        - 「Terraform CLI」が自動で入力されます。
        - \ー
        - \ー
        - \ー
      * - 遅延タイマー
        - | Movementが指定期間遅延した場合にステータスを遅延として警告表示したい場合に指定期間(1～)を入力します。(単位:分)
          | 未入力の場合は警告表示しません。
        - \ー
        - 手動入力
        - \ー     
      * - Terraform利用情報/Workspace
        - 「5.2.2 Workspaces管理」に登録したWorkspaceを選択します。
        - 〇
        - リスト選択 
        - 
      * - Movement-Module 紐付
        - 「5.2.5 Movement-Modules 紐付」へ遷移するボタンです。
        - \ー
        - \ー  
        - 
      * - 備考
        - 自由記述欄です。
        - \ー
        - 手動入力
        - 最大長4000バイト

Module素材集
************


#. |  [Module素材集]ではユーザーが作成したModuleのメンテナンス（閲覧/登録/更新/廃止）を行います。
   | Moduleの記述などに関しては、「 6.1 Moduleの記述 」を参照してください。

   ..  image:: cli/image14.png
       :alt: Module素材集
       :width: 5.06769in
       :height: 2.62023in

   **図** **5.2.44-1サブメニュー画面（Module素材集）**

#. | 「登録」-「登録開始」ボタンより、Movement情報の登録を行います。

   ..  image:: cli/image15.png
       :alt: Module素材集
       :width: 5.02128in
       :height: 1.45171in

   **図** **5.2.44-2登録画面（Module素材集）**

   | 「登録」の前に、「Module素材」を「事前アップロード（①）」してください。「アップロード状況（②）」にModuleのファイル名が表示されたのを確認してから、「登録」ボタンを押してください。

   ..  image:: cli/image16.png
       :alt: Module素材集
       :width: 1.95218in
       :height: 1.22404in

#. |  Movement-Module紐付ボタンをクリックすると対象のMovementの「5.2.5 Movement-Module紐付」へ遷移します。

   ..  image:: cli/image17.png
       :alt: Module素材集
       :width: 5.74877in
       :height: 2.23572in

   **図** **5.2.44-3サブメニュー画面（Module素材集）**

#. | Module素材集の項目一覧は以下のとおりです。

   .. list-table:: 5.2.33-1 項目一覧（Movement一覧）
      :widths: 10 20 3 10 10
      :header-rows: 1
      :align: left
   
      * - 項目
        - 説明
        - 入力必須
        - 入力形式
        - 制約事項
      * - Module素材名
        - ITAで管理するModule素材名を入力します。
        - 〇
        - 手動入力
        - 最大長256バイト
      * - Module素材
        - 作成したModuleファイルをアップロードします。
        - 〇
        - ファイル選択
        - 最大サイズ4Gバイト
      * - Movement-Module紐付
        - 「5.2.5 Movemnt-Module紐付」へ遷移するボタンです。
        - \ー
        - \ー
        - 
      * - 備考
        - 自由記述欄です。
        - \ー
        - 手動入力
        - 最大長4000バイト
    


#. | BackYardの処理でModuleファイル内に定義している変数を抜出します。抜出した変数は「5.2.7 代入値自動登録設定」や「5.2.8 代入値管理」で具体値の登録が可能になります。
   | 抜出するタイミングはリアルタイムではありませんので「5.2.7 代入値自動登録設定」や「5.2.8 代入値管理」で変数が扱えるまでに 時間がかかる ※１ 場合があります。
   | ※1 抜出のタイミングは「7.2 メンテナンス方法について」の「③起動周期の変更」に記載していますので、そちらをご参照ください。

Movement-Module紐付
*******************

#. | [Movement-Module紐付]では、Movementで実行するModule素材のメンテナンス（閲覧/登録/更新/廃止）を行います。
   | Movementに対して複数のModule素材を紐付けることが可能です。

   .. image:: cli/image18.png
      :alt: Movement-Module紐付
      :width: 4.82751in
      :height: 2.50022in

   **図** **5.2.55-1サブメニュー画面（Movement-Module紐付）**

#. | 「登録」-「登録開始」ボタンより、Movement-Module紐付の登録を行います。

   ..  image:: cli/image19.png
       :alt: Movement-Module紐付
       :width: 5.55637in
       :height: 1.42048in

   **図** **5.2.55-2登録画面（Movement-Module紐付）**

#. | Movementのリンクをクリックすると、「5.2.3 Movement一覧 」へ遷移します。
   | また、Module素材のリンクをクリックすると、「5.2.4 Module素材集 」へ遷移します。

   ..  image:: cli/image20.png
       :alt: Movement-Module紐付
       :width: 5.70014in
       :height: 1.23292in

**図** **5.2.55-3サブメニュー画面（Movement-Module紐付）**

#. | Movement-Module紐付の項目一覧は以下のとおりです。

   .. list-table:: 5.2.55-1項目一覧（Movement-Module紐付）
      :widths: 10 20 3 10 10
      :header-rows: 1
      :align: left
   
      * - 項目
        - 説明
        - 入力必須
        - 入力形式
        - 制約事項
      * - Movement
        - 「5.2.4 Movement一覧」にて登録したMovementを選択します。
        - 〇
        - リスト選択
        - \ー
      * - Module素材
        - 「5.2.4 Module素材集」で登録したModule素材を選択します。
        - 〇
        - リスト選択
        - \ー
      * - 備考
        - 自由記述欄です。
        - \ー
        - 手動入力
        - 最大長4000バイト

変数ネスト管理
**************


1. | [変数ネスト管理]では、Module素材集で登録したtfファイルで定義されている変数のタイプがlist,setかつ、その変数の中でlist,set,tuple,objectが定義されている場合、メンバー変数の最大繰返数を閲覧及び更新できます。
   | 本メニューはModule素材集を元にBackYardがレコードを管理するため、登録・廃止・復活はできません。
   | 変数ネストの管理対象については「8.1 Module素材記入例」をご参照ください。
   | 変数ネストの管理フロー例については「8.2 変数ネスト管理フロー例」をご参照ください。

   ..  image:: cli/image21.png
       :alt: 変数ネスト管理
       :width: 5.61692in
       :height: 2.92917in

   **図** **5.2.66-1 サブメニュー画面（変数ネスト管理）**


| Module素材と変数ネスト管理登録例

   
- Module素材（tfファイル）と登録値

.. code-block:: bash 

   variable "VAR_hoge" {
       type = list(
          object({
              IP = string,
              NAME = string
          })
      )
      default = [
          { “IP” = “127.0.0.1”, “NAME” = “machine_01” },
          { “IP” = “127.0.0.2”, “NAME” = “machine_02” }
      ]
   }
   

.. list-table:: 変数ネスト管理
   :widths: 10 10 10 10
   :header-rows: 1
   :align: left

   * - 項番
     - 変数名
     - メンバー変数
     - 最大繰返数
   * - 1
     - VAR_hoge
     - 
     - 2

2. | 「一覧」-「更新」ボタンより最大繰返数の更新を行います。

   ..  image:: cli/image22.png
       :alt: 変数ネスト管理
       :width: 6.69236in
       :height: 1.16181in

   **図** **5.2.66-2 更新画面（変数ネスト管理）**

3. | 変数ネスト管理の項目一覧は以下の通りです。

   .. list-table:: 5.2.56-1 項目一覧（変数ネスト管理)
      :widths: 10 20 3 10 10
      :header-rows: 1
      :align: left
   
      * - 項目
        - 説明
        - 入力必須
        - 入力形式
        - 制約事項
      * - 変数名
        - Movement-Module紐付で登録した資材で使用している変数が表示されます。
        - \ー
        - 入力不可
        -    
      * - メンバー変数名(繰返し有り)
        - | 変数ネスト管理対象がメンバー変数である場合、メンバー変数名が表示されます。
          | メンバー変数名は各階層の変数を「．」で連結して表示します。
        - \ー
        - 入力不可
        - 
      * - 最大繰返数
        - | 配列の最大繰返数を1～99,999,999を範囲で入力します。
          | 初期値はtfファイルのdefaultに記載されている値から取得した繰返数が設定されます。
          | tfファイルにdefaultの記載がない場合、1が設定されます。
          | 最終更新者がTerraform変数更新プロシージャでない場合はModule素材の更新により値が変更されることはありません。
        - 〇
        - 手動入力
        - | 入力値        
          | 1～99,999,999
      * - 備考
        - 自由記述欄です。
        - \ー
        - 手動入力
        - 最大長4000バイト
                 
   | ※初期登録および繰返数の更新はリアルタイムではないので、「5.2.7 代入値自動登録設定」や「5.2.8 代入値管理」で変数が扱えるまでに時間がかかる場合があります。
   | 初期登録および繰返数の更新タイミングは「7.2 メンテナンス方法について」に記載していますので、そちらをご参照ください。

4. | アクセス許可ロール
   | 変数ネスト管理に設定されるアクセス許可ロールは、該当の変数が定義されているModule素材集のアクセス許可ロールが設定されます。

代入値自動登録設定
******************

#. | [代入値自動登録設定]では、メニュー作成機能で作成したパラメータシート（オペレーションあり）と、Movementの変数を紐付けます。
   | 登録した情報はBackYardの処理により代入値管理に反映されます。
   | 6.2 BackYardコンテンツ (2)代入値自動登録設定 に反映ルールを記載しています。


   ..  image:: cli/image23.png
       :alt: 代入値自動登録
       :width: 4.76443in
       :height: 2.47355in 
   
   **図** **5.2.67-1サブメニュー画面（代入値自動登録)**


#. | 「登録」-「登録開始」ボタンより、代入値管理を行います。

   .. image:: cli/image24.png
      :alt: 代入値自動登録
      :width: 5.1533in
      :height: 1.40797in  

   **図** **5.2.67-2登録画面（代入値自動登録）**


#. | メニューIDまたは、メニュー名のリンクをクリックすると、対象のメニューへ遷移します。

   .. image:: cli/image25.png
      :alt: 代入値自動登録
      :width: 5.21739in
      :height: 1.29408in

   図5.2.67-3サブメニュー画面（代入値自動登録）

#. |  登録画面の項目一覧は以下のとおりです。

.. table:: 6.2.11-1 項目一覧（代入値自動登録）
   
   +-------------------+--------------------------------+----------+----------+----------+
   | カラム　          | 説明                           | 入\      | 入\      | 制\      |          
   |                   |                                | 力必須   | 力形式   | 約事項   |          
   +===================+================================+==========+==========+==========+
   | メニューグループ:\| メニュー作成機能で作成したパ\  | ○        | リ\      |          |                  
   | メニュー          | ラメータシート(オペレーション\ |          | スト選択 |          |
   |                   | あり)が表示されます。          |          |          |          |
   |                   | 該当のパラメータシートを選択し\|          |          |          |
   |                   | ます。                         |          |          |          |
   +-------------------+--------------------------------+----------+----------+----------+
   | 項目　            | 選択したパラメータシートの項目\| ○        | リ\      |          |                  
   |                   | が表示されます。               |          | スト選択 |          |
   |                   | 対象項目を選択します。         |          |          |          |
   +-------------------+--------------------------------+----------+----------+----------+
   | 登録方式          | Value型:項目の設定値を紐付けた\| ○        | リ\      |          |                  
   |                   | 変数の具体値とする場合に選択し\|          | スト選択 |          |
   |                   | ます。                         |          |          |          |
   |                   | Key型: 項目の名称を紐付けた変\ |          |          |          |   
   |                   | 数の具体値とする場合に選択しま\|          |          |          |
   |                   | す。                           |          |          |          |
   |                   | 項目野設定値が空白の場合は紐付\|          |          |          | 
   |                   | け対象外となります。           |          |          |          |
   |                   | Key-Value型: 項目の名称(Key)と\|          |          |          |
   |                   | 設定値(Value)を紐付けた変数の\ |          |          |          |
   |                   | 具体値とする場合に選択します。\|          |          |          | 
   +-------------------+--------------------------------+----------+----------+----------+
   | Movement          | Movement一覧で登録したMovement\| ○        | リ\      |          |                  
   |                   | が表示されます。               |          | スト選択 |          |
   |                   | Movementを選択します。         |          |          |          |
   +------+------------+--------------------------------+----------+----------+----------+
   | key\ | 変数名     | Movement-Module紐付で登録した\ | ○        | リ\      | 登録方式\|                  
   | 情報 |            | 資材で使用されている変数が表示\|          | スト選択 | でKey型\ |
   |      |            | されます。                     |          |          | たはKey-\|
   |      |            | Key型で具体的に紐付けたい変数\ |          |          | Value型\ |
   |      |            | を選択します。                 |          |          | を選択し\|
   |      |            |                                |          |          | た場合は\|
   |      |            |                                |          |          | 必須     |
   |      +------------+--------------------------------+----------+----------+----------+
   |      | メンバー\  | メンバー変数を持つ変数名を選択\| 変数名に\| リ\      |          |
   |      | 変数       | した場合にメンバー変数が表示さ\| より変動 | スト選択 |          |
   |      |            | れます。                       |          |          |          |
   |      |            | メンバー変数を選択します。     |          |          |          |
   |      +------------+--------------------------------+----------+----------+----------+
   |      | 代入順序   | 複数具体値が設定できる変数名の\| 変数名に\| 手動入力\| ブランク\|
   |      |            | 場合のみ必須入力になります。   | より変動 |          | または、\|
   |      |            | 具体値の代入順序(1～)を入力し¥ |          |          | 正の整数 | 
   |      |            | ます。入力値に従い昇順で代入さ\|          |          |          |
   |      |            | れます。                       |          |          |          |
   +------+------------+--------------------------------+----------+----------+----------+
   | valu\| 変数名     | Movement-Module紐付で登録した\ | ○        | リ\      | 登録方式\|         
   | e情報|            | 資材で使用されている変数が表示\|          | スト選択 | でValue\ |
   |      |            | されます。                     |          |          | 型または\| 
   |      |            | Value型で具体値に紐付けたい変\ |          |          | Key-Valu\|   
   |      |            | 数を選択します。               |          |          | e型を選\ |
   |      |            |                                |          |          | 択した場\|     
   |      |            |                                |          |          | 合は必須 |          
   |      +------------+--------------------------------+----------+----------+----------+
   |      | HCL設定    | 「OFF」または「ON」を選択しま\ | ○        | リ\      | 選択した\| 
   |      |            | す。                           |          | スト選択 | 変数名が\| 
   |      |            | BackYardの処理により代入管理に\|          |          | map型の\ |
   |      |            | に反映する際、選択した値が引き\|          |          | 場合はON\|
   |      |            | 継がれます。                   |          |          | で設定す\|
   |      |            |                                |          |          | る必要が\|
   |      |            |                                |          |          | あります |
   |      |            |                                |          |          | オペレー\|
   |      |            |                                |          |          | ション、\|
   |      |            |                                |          |          | Movement\|
   |      |            |                                |          |          | 、変数名\|
   |      |            |                                |          |          | が一致し\|
   |      |            |                                |          |          | ている場\|
   |      |            |                                |          |          | 合、HCL\ |
   |      |            |                                |          |          | 設定はON\|
   |      |            |                                |          |          | またはOF\|
   |      |            |                                |          |          | Fに統一\ |
   |      |            |                                |          |          | てくださ\|
   |      |            |                                |          |          | い。     |                            
   +------+------------+--------------------------------+----------+----------+----------+

| ※登録方式でKey型を選択した場合、代入値管理に反映する際にHCL設定はOFFで設定されます。
| ※メンバー変数を設定する場合は、同じ変数内のメンバー変数の具体値も全て設定してください。
| 代入値を設定しなかった他のメンバー変数でもデフォルト値が使用されることはありません。

.. figure:: /images/ja/terraform-driver/common/assignedvalue_example.png
   :alt: 代入値例
   :width: 5.21739in
   :height: 1.29408in
   

代入値管理
**********


#. |  [代入値管理]では、オペレーションごとに、対象のMovementで利用されるModule内の変数に代入する具体値をメンテナンス（閲覧／登録／更新／廃止）できます。

   .. image:: cli/image26.png
      :alt: 図5.2.88-1サブメニュー画面（代入値管理）
      :width: 4.76117in
      :height: 2.47355in

   **図** **5.2.88-1サブメニュー画面（代入値管理）**

#. | 「登録」-「登録開始」ボタンより、代入値管理を行います。

   .. image:: cli/image27.png
      :alt: 代入値管理
      :width: 5.97504in
      :height: 1.52077in

   **図** **5.2.88-2登録画面（代入値管理）**

   | 代入値管理の変数は、5.2.4 Module素材集 」で登録されたファイルの情報から反映されます。

   | ※反映のタイミングは「7.2メンテナンス方法について 」の「③起動周期の変更」に記載していますので、そちらをご参照ください。

#. | 代入値管理に登録した変数は、作業実行時に生成されるterraform.tfvarsファイルに「変数名」が「Key」、「具体値」が「Value」として記載され、作業実行で使用されます。
   | 「Secure設定」を「ON」にしていた場合は作業実行時に生成されるsecure.tfvarsファイルに「変数名」が「Key」、「具体値」が「Value」として記載され、作業実行で使用されます。
   | secure.tfvarsファイルは「5.2.10 作業状態確認」「5.2.11 作業管理」で取得できる投入データの中に格納されません。

#. | 代入値管理の項目一覧は以下のとおりです。

   .. list-table:: 5.2.56-1 項目一覧（変数ネスト管理)
      :widths: 10 20 3 10 10
      :header-rows: 1
      :align: left
   
      * - 項目
        - 説明
        - 入力必須
        - 入力形式
        - 制約事項
      * - オペレーション
        - 対象オペレーションを選択します。
        - 〇
        - リスト選択
        - \ー  
      * - Movement
        - 対象のMovementを選択します。
        - 〇
        - リスト選択
        - \ー
      * - 変数名
        - | Movement-Module紐付にて登録されているMovement素材の中から、選択されたMovementにアタッチしている変数名が表示されます。
          | 変数名を選択します    
        - 〇
        - リスト選択
        -  \ー  
      * - HCL設定
        - | 「OFF」または「ON」を選択します。
          | 変数に文字列以外の値を設定する際などに「ON」を設定します。  
        - 〇
        - リスト選択
        - | 選択した変数名がmap型の場合はONで設定する必要があります。
          | オペレーション、Movement、変数名が一致している場合、HCL設定はONまたはOFFに統一してください。
      * -  メンバー変数
        - | メンバー変数を持つ変数名を選択した場合にメンバー変数が表示されます。
          | メンバー変数を選択します。
        - 変数名により変動    
        - リスト選択
        - 
      * - 代入順序
        - | 複数具体値が設定できる変数の場合のみ必須入力になります。
          | 具体値の代入順序(1～)を入力します。
          | 入力値に従い昇順で代入されます。
        - 変数名により変動
        - 手動入力
        - ブランクまたは、正の整数
      * - デフォルト値
        - default内で変数に紐づいている具体値が表示されます。
        - \ー
        -       
        -
      * - Secure設定
        - | 「OFF」または「ON」を選択します。
          | 「ON」を選択した場合、具体値を暗号化しITA上で表示させないようにします。
          | また「ON」に下対象は「5.2.10 作業状態確認」「5.2.11 作用管理」で取得できる投入データの中に格納されません。
        - 〇
        - リスト選択
        - | Terraformが出力するPlanやApplyのログ上で値を非表示にする場合は\
          | 登録したModule素材のvariableブロックの中で『sensitive = true』を指定する必要があります。
      * - 具体値
        - オペレーション/Movementで使用する変数の具体値を入力します。
        - 〇
        - 手動入力
        - 最大8192バイト
      * - 備考
        - 自由記述です。
        - \ー
        - 手動入力
        - 最大長4000バイト


作業実行
********

#. | 作業の実行を指示します。
   | Movement一覧、オペレーション一覧からそれぞれラジオボタンで選択し、実行ボタンを押すと、「5.2.10 作業状態確認 」に遷移し、実行されます。

   ..  image:: cli/image28.png
       :alt: 作業実行
       :width: 5.18712in
       :height: 3.82923in
    
   **図** **5.2.99-1 サブメニュー画面（作業実行）**

   #. | 予約日時の指定
      | 「予約日時」を入力することで、実行およびPlan確認を予約することができます。
      | 「予約日時」には、未来の日時のみ登録可能です。

   #. | Movementの指定
      | 「5.2.3 Movement一覧 」で登録したMovementを選択します。

   #. | オペレーションの指定
      | 「\ `5.1.1 オペレーション一覧 <\l>`__\ 」で登録したオペレーションを選択します。

   #. | 実行
      | 「実行」ボタンをクリックすると、「5.2.10作業状態確認 」に遷移し、作業が実行されます。
      | Plan完了後にApplyが自動で実行されます。

   #. | Plan確認
      | 「Plan確認」ボタンをクリックすると、「実行」ボタンをクリックした場合同様に作業実行が開始されますが、Planのみを実行し、Applyは実行されません。


#. | Outputブロックを含むModuleがConductorから実行された場合、Outputブロックに書かれた内容がデータリレイストレージパス（Conductor実行時、各Movementで共有するディレクトリを、ITAサーバから見たディレクトリパス）にjson形式ファイルで保存されます。
   | このファイルを使用することにより、同一Conductorの別のMovementでTerraformが出力した値を使用することができます。

   | ファイルパス

   | [データリレイストレージパス]/[ConductorインスタンスID]/terraform_output_[作業No].json
   | 例：/exastro/data_relay_storage/conductor/0000000001/terraform_output_0000000001.json
   | データリレイストレージパス・・・[Conductor]-[Conductorインターフェース情報]メニューの[データリレイストレージパス]
   | ConductorインスタンスID・・・[Conductor]-[Conductor作業一覧]メニューの[ConductorインスタンスID]（左0埋め10桁）
   | 作業No.・・・[Terraform]-[作業管理]メニューの[作業No.]（左0埋め10桁）

   | 記述例

   +-----------------------------+
   | variable "VAR_sample" {     |
   |                             |
   | type = string               |
   |                             |
   | default = "sample_string"   |
   |                             |
   | }                           |
   |                             |
   | output "output_sample" {    |
   |                             |
   | value = "${var.VAR_sample}" |
   |                             |
   | }                           |
   +-----------------------------+

   | 出力例

   +----------------------------------+
   | {                                |
   |                                  |
   | "output_sample": "sample_string" |
   |                                  |
   | }                                |
   +----------------------------------+

作業状態確認
************


#. | 作業の実行状態を監視します。

   .. image:: cli/image29.png
      :width: 5.34783in
      :height: 3.43273in

   **図** **5.2.100-1サブメニュー画面（作業状態確認）**

   #. | 実行状態表示
   
      | 実行状況に即し、ステータスが表示されます。
      | 「実行種別」にはPlan確認の場合には「Plan確認」、Workspaceごとに構成・管理されたリソースの削除（「5.2.2 Workspaces管理 」から実行されます。）の場合は「リソース削除」、それ以外の場合には「通常」が入ります。
     
      | 「進行状況(Initログ)」「進行状況(Planログ)」「進行状況(Applyログ)」にはTerraformで実行するコマンドterraforminit / terraform plan / terraformapplyの各実行状況のログが表示されます。
      
      | ステータスが想定外エラーで終了した場合、「5.2.1インターフェース情報」の登録不備や、その他のWebコンテンツの登録不備が原因であれば、「進行状況(エラーログ)」にメッセージが表示されます。
      | それ以外のエラーの場合は「進行状況(エラーログ)」にメッセージが表示されません。この場合は、プロセスのログにエラー情報が記録されます。必要に応じてプロセスのログを確認ください。
      | ※プロセスのログは「\ `7.2メンテナンス方法について <#メンテナンス方法について>`__\ 」の「④ログファイル名」に記載していますので、そちらをご参照ください。

      | 「呼出元Symphony」には、どのSymphonyから実行されたかを表示します。
      | TerraformCLIドライバから直接実行した場合やConductorから実行した場合は空欄になります。
      | 「呼出元Conductor」には、どのConductorから実行されたかを表示します。
      | TerraformCLIドライバから直接実行した場合やSymphonyから実行した場合は空欄になります。

      | 「実行ユーザ」には、作業実行メニューより「実行」ボタンを押下した際のログインユーザが表示されます。

      | ※「実行種別」が「リソース削除」の場合は下記の項目が設定されません。

      - 呼出元Symphony
      - 呼出元Conductor
      - Movement（ID、名称、遅延データ（分）
      - オペレーション（No.、名称、ID）
      - 代入値
      - 入力データ（投入データ）

   #. | 代入値確認
      | 「確認」ボタンで「5.2.8 代入値管理」が表示され、作業対象のオペレーションとMovementに絞り込んだ代入値が表示されます。

   #. | 緊急停止/予約取り消し
      | 「緊急停止」ボタンで構築作業を停止させることができます。
      | また、実行前の「予約実行」の作業の場合は、「予約取消」ボタンが表示されます。
      | 「予約取消」ボタンで予約実行が取り消せます。

   

   #. | ログ検索
      | 実行ログ、エラーログは、フィルタリングができます。
      | 各ログのフィルタのテキストボックスに検索したい文字列を入力し、「該当行のみ表示」のチェックボックスをチェックすることで該当する行だけが表示されます。
      | 実行ログ、エラーログのリフレッシュ表示間隔と最大表示行数を、「5.2.1 インターフェース情報」の「状態監視周期（単位ミリ秒）」と「進行状態表示行数」で設定できます。

   #. | 投入データ
      | 実行したModule素材および設定した代入値の一覧をjson形式で取得したファイルを格納したzip形式ファイルをダウンロードすることができます。


      |  格納されているファイルは以下の通りです。

      .. table:: 5.2.100-1 投入データ格納ファイル
      
         +--------------------------------+------------------------------------+
         |    ファイル名                  |     説明                           |
         +================================+====================================+
         | (投入したModule素材ファイル名) | 投入したModule素材ファイルがzipフ  |
         |                                | ァイルの直下にすべて格納されます。 |
         +--------------------------------+------------------------------------+
         | terraform.tfvars               | 設定した各代入値                   |
         |                                | についての「変数名(key)」「具体値  |
         |                                | (value)」を記載したファイルです。  |
         |                                |                                    |
         |                                | Secu                               |
         |                                | re設定がONの対象は記載されません。 |
         +--------------------------------+------------------------------------+

   #. | 結果データ
      | 実行ログ、エラーログおよび、terraformコマンドが生成したファイルを格納したzip形式ファイルをダウンロードすることができます。
      | 格納されているファイルは以下の通りです。

      .. table:: 5.2.100-2 結果データ格納ファイル
      
         +--------------------------+------------------------------------------+
         | ファイル名               | 説明                                     |
         +==========================+==========================================+
         | Init.log                 | 進行状況(Initログ)に出                   |
         |                          | 力された内容を記載したlogファイルです。  |
         +--------------------------+------------------------------------------+
         | plan.log                 | 進行状況(Planログ)に出                   |
         |                          | 力された内容を記載したlogファイルです。  |
         +--------------------------+------------------------------------------+
         | apply.log                | 進行状況(Applyログ)に出                  |
         |                          | 力された内容を記載したlogファイルです。  |
         +--------------------------+------------------------------------------+
         | error.log                | 進行状況(エラーログ)に出                 |
         |                          | 力された内容を記載したlogファイルです。  |
         +--------------------------+------------------------------------------+
         | result.txt               | 作業実行時にバックヤードが               |
         |                          | 利用する進行状況を記録するファイルです。 |
         +--------------------------+------------------------------------------+
         | .terraform.lock.hcl      | Terraformが生成したファイルです          |
         |                          | 。providerやmoduleの情報が記載されます。 |
         +--------------------------+------------------------------------------+
         | terraform.tfstate        | Terraformが生成したstateファイルです。   |
         |                          |                                          |
         |                          | 暗号化された状態で保存されています。     |
         +--------------------------+------------------------------------------+
         | terraform.tfstate.backup | Terraformが生                            |
         |                          | 成したstateファイルのバックアップです。  |
         |                          |                                          |
         |                          | 暗号化された状態で保存されています。     |
         +--------------------------+------------------------------------------+

作業管理
********

| 作業の履歴を閲覧できます。

| 条件を指定し「フィルタ」ボタンをクリックすると、作業一覧テーブルを表示します。
| 「作業状態確認」ボタンで、「5.2.10 作業状態確認 」に遷移し、実行状態の詳細を見ることができます。

.. image:: cli/image30.png
   :alt: 作業管理
   :width: 5.26236in
   :height: 2.83358in

**図** **5.2.111-1サブメニュー画面（作業管理）**

構築コード記述方法
==================

| Terraform-CLI-driverでModuleの記述について説明します。

Moduleの記述
------------

| Moduleファイルは、HCL（HashiCorp ConfigurationLanguage）というHashiCorp社独自の言語により記述します。
| HCLの詳細については、Terraformの製品マニュアルを参照してください。

BackYard コンテンツ
-------------------

#. | 変数自動登録

   | 5.2.4 Module素材集」に登録したModule素材ファイルから変数を抽出します。
   | 変数の抽出ルールについては「 2.1 変数の種類」をご参照ください。
   | なお、取出すタイミングは「Terraform変数自動登録」プロセスの起動周期に依存します。

#. | 代入値自動登録設定

   | 連携対象としたパラメータシートのオペレーションの項目の設定値と紐付けたMovementと変数の情報を代入値管理に反映します。
   |  なお、取出すタイミングは「Terraform自動登録設定」プロセスの起動周期に依存します。
   | 代入値管理は複数の操作者が更新を行います。
   | 最終更新者が他操作者の場合は反映処理をしません。
   | 代入値自動登録設定のデータを反映したい場合は、代入値管理で該当レコードを廃止にする操作を行ってください。

| 代入値管理への反映ルールを以下に記載します。


| ① 代入値自動登録設定に登録されている情報を代入値管理へ反映時


.. table:: 代入値管理の状態確認

   +------------------+--------------+-------------------------------------+-----------------+
   | 代入値管理の状態 | 該当レコード\| 該当レコードあり                    | 該当レコード\   |      
   |                  | なし         +----------+--------------------------+ 廃止中          |
   |                  |              | = 具体値 | ≠具体値                  |                 | 
   |                  |              |          +--------------------------+                 |
   |                  |              |          | 最終更新者               |                 |
   |                  |              |          +---------------+----------+                 |
   |                  |              |          | BackYard処理  | 他操作者 |                 |
   +==================+==============+==========+===============+==========+=================+
   | 代入値管理\      | 新規レコード\| ー       | 該当レコードの| ー       | 廃止レコード\   | 
   | への反映         | 追加         |          | 具体値更新    |          | 復活            |
   +------------------+--------------+----------+---------------+----------+-----------------+



| ※該当レコード:オペレーション+Movement+変数名+HCL設定+アクセス権が同一のレコードの意

| ② 代入値自動登録設定に登録されていない情報（代入値管理のみに登録）を代入値管理へ反映

.. table:: 代入値管理の状態確認
   
   +-----------------------+-------------------------+
   | 代入値管理の状態      | 該当レコードあり        |     
   |                       +-------------------------+ 
   |                       | 最終更新者              |        
   |                       +--------------+----------+                   
   |                       | BackYard処理 | 他操作者 |                                               
   +=======================+==============+==========+
   | 代入値管理\           | 該当レコード\| ー       | 
   | への反映              | 廃止         |          | 
   +-----------------------+--------------+----------+


| ③ HCL設定について
| 代入値自動登録に設定した「HCL設定」の値は代入値管理に反映する際に同じ値が設定されます。

| ④Secure設定について
| 連携対象としたパラメータシートの項目が「パスワード」の場合は代入値管理に反映する際に「Secure設定」がONで設定されます。
| それ以外の場合はOFFで設定されます。

| ⑤アクセス許可ロールについて
|  連連携対象としたパラメータシートのレコードに設定されたオペレーションのアクセス許可ロールと、代入値自動登録のレコードに設定されたMovementのアクセス許可ロールを参照し、一致しているすべてのアクセス許可ロールが代入値管理に反映する際に設定されます。
| どちらもアクセス許可ロールが設定されていない場合（空欄の場合）は、代入値管理に反映する際も空欄が設定されます。
| また、一致するアクセス許可ロールが一つも無い場合は代入値管理にレコードが作成されません。

運用操作
========

| 本機能を活用する操作は、クライアントPCのブラウザ画面からのユーザー利用による入力だけでなく、システム運用・保守による操作もあります。用意している運用・保守の操作は次のとおりです。

メンテナンス
------------

| Terraform-CLI-driverのプロセスの開始/停止/再起動に必要なファイルは以下となります。

.. table:: 開始/停止/再起動に必要なファイル

   +----------------------------------+----------------------------------+
   | 説明                             | 対象ファイル名                   |
   +==================================+==================================+
   | Terraform作業実行監視            | ky_terraf\                       |
   |                                  | orm_cli_execute-workflow.service |
   | 未実行作業の実行を行う。         |                                  |
   +----------------------------------+----------------------------------+
   | Terraform変数自動登録            | ky_terraform_cli\                |
   |                                  | _varsautolistup-workflow.service |
   | アップロード\                    |                                  |
   | したModule素材から変数・メンバー\|                                  |
   | 変数・最大繰返数の取出しを行う。 |                                  |
   |                                  |                                  |
   | 最大\                            |                                  |
   | 繰返数をメンバー変数に反映する。 |                                  |
   +----------------------------------+----------------------------------+
   | Terraform自動登録設定            | ky_terraform_c\                  |
   |                                  | li_valautosetup-workflow.service |
   | 代入値自動登録に設定され\        |                                  |
   | た情報を代入値管理に反映を行う。 |                                  |
   +----------------------------------+----------------------------------+


| 対象ファイルは「/usr/lib/systemd/system」に格納されています。
| プロセス起動/停止/再起動の方法は次の通りです。
| root権限でコマンドを実行してください。

| ①プロセス起動

.. code-block:: bash 

   # systemctl start ky_terraform_cli_execute-workflow.service

| ②プロセス停止

.. code-block:: bash 

   # systemctl stop ky_terraform_cli_execute-workflow.service

| ③プロセス再起動

.. code-block:: bash 

   # systemctl restart ky_terraform_cli_execute-workflow.service


| 各対象ファイル名に置き換えて起動/停止/再起動を行ってください。

メンテナンス方法について
------------------------

| ①　NORMALレベルへの変更
| 以下のファイルの8行目「DEBUG」を「NORMAL」に書き換えます。
| ログレベル設定ファイル：
| :file:`<インストールディレクトリ>/ita-root/confs/backyardconfs/ita_env`

|  ②　DEBUGレベルへの変更
| 以下のファイルの8行目「NORMAL」を「DEBUG」に書き換えます。
| ログレベル設定ファイル：
| :file:`<インストールディレクトリ>/ita-root/confs/backyardconfs/ita_env`

|  ③ 起動周期の変更
| 各対象ファイルのExecStartの5番目のパラメータを変更します。（単位:秒）
| 例外を除き起動周期はデフォルト値の使用をしてください。

.. code-block:: bash 

   ExecStart=/bin/sh ${ITA_ROOT_DIR}/backyards/common/ky_loopcall-php-procedure.sh /bin/php /bin/php ${ITA_ROOT_DIR}/backyards/terraform_driver/ky_terraform_execute-workflow.php ${ITA_ROOT_DIR}/logs/backyardlogs 5 ${ITA_LOG_LEVEL} > /dev/null 2>&1

| 書き換え後、プロセス再起動(restart)後に有効になります。

| ④ ログファイル名

.. table:: ログファイル

   +----------------------------------+----------------------------------+
   |     プロセス名                   | ログファイル名                   |
   +==================================+==================================+
   | k\                               | ky_terraform_c\                  |
   | y_terraform_cli_execute-workflow | li_execute-workflow_YYYYMMDD.log |
   +----------------------------------+----------------------------------+
   | k\                               | ky_terraform_cli_exe\            |
   | y_terraform_cli_execute-workflow | cute-child-workflow_YYYYMMDD.log |
   +----------------------------------+----------------------------------+
   | ky_terra\                        | ky_terraform_cli_vars\           |
   | form_cli_varsautolistup-workflow | autolistup-workflow_YYYYMMDD.log |
   +----------------------------------+----------------------------------+
   | ky_ter\                          | ky_terraform_cli_va\             |
   | raform_cli_valautosetup-workflow | lautosetup-workflow_YYYYMMDD.log |
   +----------------------------------+----------------------------------+

| ログファイルの出力先：:file:`<インストールディレクトリ>/ita-root/logs/backyardlogs`

付録
====

Module素材記入例・登録例
------------------------

Module素材の記入例と登録例を「 4.1 Terraform作業フロー」のフロー番号と照らし合わせて記載します。

1. シンプルなパターン

   #. | string型
    
      .. figure:: /images/ja/terraform-driver/common/string.png
         :alt: string型
         :align: left
         :width: 500px
               
   #. | number型
   
      .. image:: /images/ja/terraform-driver/common/number.png
         :alt: number型
         :align: left
         :width: 500px      
   
   #. | bool型
   
      .. figure:: /images/ja/terraform-driver/common/bool.png
         :alt: bool型
         :align: left
         :width: 500px

   #. | list型
  
      .. figure:: /images/ja/terraform-driver/common/list.png
         :alt: list型
         :align: left
         :width: 500px
  
   #. | set型
   
      .. figure:: /images/ja/terraform-driver/common/set.png
         :alt: set型
         :align: left
         :width: 500px
      

   #. | tuple型
 
      .. figure:: /images/ja/terraform-driver/common/tuple.png
         :alt: tuple型
         :align: left
         :width: 500px  

   #. | map型
   
      .. figure:: /images/ja/terraform-driver/common/map.png
         :alt: map型
         :align: left
         :width: 500px
                 

   #. | object型
   
      .. figure:: /images/ja/terraform-driver/common/object.png
         :alt: object型
         :align: left
         :width: 500px  

   #. | any型
 
      .. figure:: /images/ja/terraform-driver/common/any.png
         :alt: map型
         :align: left
         :width: 500px
 

   #. | typeの記載がない

      .. figure:: /images/ja/terraform-driver/common/notype.png
         :alt: typeの記載がない
         :align: left
         :width: 500px    

#. 複雑なパターン

   #. | list型配下のlist

      .. image:: /images/ja/terraform-driver/common/list2.png
        :alt: list型配下のlist
        :align: left
        :width: 5.26236in
        :height: 2.83358in   

   #. | list型配下のobject
   
      .. figure:: /images/ja/terraform-driver/common/object2.png
         :alt: list型配下のlist
         :align: left
         :width: 500px
 

   #. | object配下のlist配下のobject

      .. figure:: /images/ja/terraform-driver/common/object3.png
         :alt: object配下のlist配下のobject
         :align: left
         :width: 500px
      
      |  

      .. figure:: /images/ja/terraform-driver/common/object4.png
         :alt: object配下のlist配下のobject
         :align: left
         :width: 500px
                

#. 特殊な型

   #. | list型配下のmap型

      .. figure:: /images/ja/terraform-driver/common/map2.png
         :alt: list型配下のmap型
         :align: left
         :width: 500px
           

変数ネスト管理フロー例
----------------------

| 変数ネスト管理の操作例を「4.1 Terraform作業フロー」のフロー番号と照らし合わせて記載します。

1. 最大繰返数を増加させる 

.. figure:: /images/ja/terraform-driver/common/Increase_number_repetitions.png
     :alt: 最大繰返数を増加させる
     :align: left
     :width: 500px 

|

.. figure:: /images/ja/terraform-driver/common/Increase_number_repetitions2.png
     :alt: 最大繰返数を増加させる
     :align: left
     :width: 500px

2. 最大繰返数を減少させる

.. figure:: /images/ja/terraform-driver/common/repeated_number_decrease.png
     :alt: 最大繰返数を減少させる
     :align: left
     :width: 500px

|

.. figure:: /images/ja/terraform-driver/common/repeated_number_decrease2.png
     :alt: 最大繰返数を減少させる
     :align: left
     :width: 500px
























